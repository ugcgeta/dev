
1.xpack-riscv-none-embed-gcc-8.2.0-3.1-linux-x64.tgzをできる限り浅い場所に解凍します。wslで/opt直下に解凍するといいです。
  wslについてきたmakeでコンパイルするのでC://~~~はうまく扱ってくれませんでした。
    tar -xvzf /mnt/c/User---/xpack-riscv-none-embed-gcc-8.2.0-3.1-linux-x64.tgzを/optで行います。
2.Makefile内のコンパイラの位置を修正します。以下のように書き換えました。
  RISCV_PATH ?= /opt/xPacks/riscv-none-embed-gcc/8.2.0-3.1
3.makeを実行します。うまくいけばbuildディレクトリができ、その中にfw-flash.vがいます。
 
 -> 「D:\FPGA\TangNano-9K\TangNano-9K-example-main\picotiny」でlinuxシェルを起動して
 　コマンド実行
 　　make flash
 　　make brom
 　　	bootrom用のソフト作成
 　　	これをsram初期値にしないとUARTで書き込めないはず

4.先ほどのpythonコマンドのvファイルをfw-flash.vのパスに置き換えて実行します。そこからの操作は先ほどと変わりません。

python .\sw\pico-programmer.py .\example-fw-flash.v COM13
　->実行したターミナルに以下のような出力がみられるはず。
　　waiting for resetの下に...が増えていく。
　　この間にtang nano 9kのリセットボタンS1を押して離すと書き込まれます。


5.teratermに表示されるメニューが先ほどから変化していたら成功です。


注意
　python3にしないとエラーが出る
　wslのときは
　
　　sudo ln -s /usr/bin/python3 /usr/bin/python
　でデフォルトをpython3にすること
　
　
　
FPGA起動時にBoot内容が起動され、

以下記述①で0.8usecウェイトし、その間にUARTデータが変化したら
0x56を送信後
　if(waitcnt == FW_WAIT_MAXCNT)
を満たさずにwhileへ入ります。

UARTデータが変化しなかったら、
アドレス0　(焼きこみ済みソフト)を実行します。
////////////////////////////////////////////////////
記述①
    for (waitcnt = 0; waitcnt < FW_WAIT_MAXCNT; waitcnt++) {
        if (UART0->DATA == 0x55) {
            uart_putchar(0x56);
            break;
        }
    }

    if (waitcnt == FW_WAIT_MAXCNT) {
        void (*flash_vec)(void) = (void (*)(void))(0x00000000);
        flash_vec();
    }
    
    while (1) {
    instr = uart_getchar();
////////////////////////////////////////////////////
        
        
        